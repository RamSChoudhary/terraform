name: 'Terraform'

on:
#  push:
#    branches: [ "main" ]
#  pull_request:

#permissions:
#  contents: read
  
 workflow_dispatch:
 
permissions:
 id-token: write
 contents: read
 actions: read
 security-events: write
 pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure CLI script file
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az account show

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init & Plan
      run: | 
       terraform init -no-color
       terraform plan -input=false -var-file=terra.tfvars -no-color

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check
    
        
    # - name: Add Firewall rule
    #   id: add_firewallrule
    #   shell: bash
    #   run: |
    #         agentIP=$(curl -s https://api.ipify.org/)
    #         if [[ $(az keyvault list --resource-group test-rg --query "[?name=='test-kv1441'] | length(@)") > 0 ]]; then
    #           az keyvault network-rule add \
    #             --resource-group test-rg \
    #             --name test-kv1441 \
    #             --ip-address $agentIP
    #         fi
    #         if [[ $(az keyvault list --resource-group test-rg --query "[?name=='test-kv1441'] | length(@)") > 0 ]]; then
    #           az keyvault network-rule add \
    #             --resource-group test-rg \
    #             --name test-kv1441 \
    #             --ip-address $agentIP
    #         fi
    #         sleep 120s
    #         echo $agentIP


    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform plan -input=false -var-file=terra.tfvars -no-color

    - name: ðŸ”Ž Check IP
      run: curl https://api.ipify.org 
      
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
    #  if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file=terra.tfvars
